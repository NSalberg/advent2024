package grid

import (
	"fmt"
	"image"
	"log"
	"os"
	"slices"
	"strings"
)

type grid map[image.Point]rune

func newGrid(input string) grid {
	grid := make(map[image.Point]rune)
	for y, line := range strings.Fields(input) {
		for x, letter := range line {
			grid[image.Point{X: x, Y: y}] = letter
		}
	}
	return grid
}

func (grid grid) countNumRune(a rune) int {
	total := 0
	for _, v := range grid {
		if v == a {
			total += 1
		}
	}
	return total
}

func (g grid) print() {
	// Determine the bounds of the grid
	var minX, minY, maxX, maxY int
	for p := range g {
		if p.X < minX {
			minX = p.X
		}
		if p.Y < minY {
			minY = p.Y
		}
		if p.X > maxX {
			maxX = p.X
		}
		if p.Y > maxY {
			maxY = p.Y
		}
	}

	// Print the grid row by row
	for y := minY; y <= maxY; y++ {
		for x := minX; x <= maxX; x++ {
			if val, exists := g[image.Pt(x, y)]; exists {
				fmt.Print(string(val)) // Print the rune
			} else {
				fmt.Print(".") // Print a placeholder for empty cells
			}
		}
		fmt.Println() // New line after each row
	}
}

func sortedKeys(m map[image.Point]rune) []image.Point {
	keys := make([]image.Point, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}

	slices.SortFunc(keys, func(a, b image.Point) int {
		// Compare X coordinates first, then Y coordinates
		if a.X < b.X {
			return -1
		} else if a.X > b.X {
			return 1
		}
		if a.Y < b.Y {
			return -1
		} else if a.Y > b.Y {
			return 1
		}
		return 0
	})

	return keys
}
